apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: example-azurevm-template
  title: Example Azure VM Template
  description: An example template for the scaffolder that creates a simple Azure VM
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some info
      required:
        - name
        - owner
        - app_code
        - vm_name
        - vm_type
        - username                
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        owner:
          title: Component Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group, User]
        app_code:
          title: Application Code
          type: string
          description: 3-digit applicaiton code
          default: ABC
          enum:
            - ABC
            - DEF
            - GHI
            - JKL
            - MNO
            - PQR
            - STU
        vm_name:
          title: Virtual Machine name
          type: string
          description: Azure name of the virtual machine
        vm_type:
          title: Virtual Machine type and size
          type: string
          description: Type and size of Azure virtual machine  
          default: Standard_DS1_v2
          enum:
            - Standard_DS1_v2
            - Standard_DS2_v2
            - Standard_DS4_v2
            - Standard_DS8_v2
        username:
          title: Username
          type: string
          description: Username of the virtual machine OS     
    - title: Choose a location
      required:
        - owner      
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - unicredit       

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          owner: ${{ parameters.owner }}
          app_code: ${{ parameters.app_code }}
          vm_name: ${{ parameters.vm_name }}
          vm_type: ${{ parameters.vm_type }}
          username: ${{ parameters.username }}
          username

    - action: catalog:write
      id: create-catalog-info-file
      name: Create catalog file
      input:
        filePath: './catalog-info.yaml'
        entity:
          apiVersion: backstage.io/v1alpha1
          kind: Component
          metadata:
            name: ${{ parameters.name }}
            annotations: {}
          spec:
            type: service
            lifecycle: production
            owner: ${{ parameters.owner }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
